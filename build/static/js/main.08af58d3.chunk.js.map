{"version":3,"sources":["components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","nextProps","nextState","console","log","prevProps","prevState","message","snapshot","className","src","this","props","avatar","alt","style","width","name","title","type","onChange","onChangeName","value","onClick","onDelete","children","state","Component","App","useState","id","cards","setCards","showCard","setShowCard","buttonStyle","backgroundColor","length","cardsMarkup","map","card","index","cardIndex","cards_copy","splice","deleteCardHandler","event","findIndex","target","changeNameHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAgDeA,E,2KAtCX,SAAsBC,EAAWC,GAE7B,OADAC,QAAQC,IAAI,oCACL,I,qCAGX,SAAwBC,EAAWC,GAG/B,OAFAH,QAAQC,IAAI,qCAEL,CAAEG,QAAS,mB,gCAGtB,SAAmBF,EAAWC,EAAWE,GACrCL,QAAQC,IAAI,+BAAgCI,K,kCAKhD,WACIL,QAAQC,IAAI,oC,oBAGhB,WAEI,OADAD,QAAQC,IAAI,wBAER,sBAAKK,UAAU,OAAf,UACI,qBAAKC,IAAKC,KAAKC,MAAMC,OAAQC,IAAI,SAASC,MAAO,CAAEC,MAAO,UAC1D,sBAAKP,UAAU,YAAf,UACI,6BAAI,4BAAIE,KAAKC,MAAMK,SACnB,4BAAIN,KAAKC,MAAMM,QACf,uBAAOC,KAAK,OAAOC,SAAUT,KAAKC,MAAMS,aAAcC,MAAOX,KAAKC,MAAMK,OACxE,4BAAG,wBAAQR,UAAU,oBAAoBc,QAASZ,KAAKC,MAAMY,SAA1D,sBACH,8BAAMb,KAAKC,MAAMa,oB,uCApCjC,SAAgCb,EAAOc,GAEnC,OADAvB,QAAQC,IAAI,sCACLsB,M,GAJIC,a,MCqEJC,MAnEf,WAAgB,IAAD,EACaC,mBAAS,CACjC,CACEC,GAAI,aACJb,KAAM,mBACNC,MAAO,oCACPL,OAAQ,8CAEV,CACEiB,GAAI,UACJb,KAAM,sBACNC,MAAO,4BACPL,OAAQ,8CAEV,CACEiB,GAAI,aACJb,KAAM,gBACNC,MAAO,qCACPL,OAAQ,gDAlBC,mBACNkB,EADM,KACCC,EADD,OAqBmBH,oBAAS,GArB5B,mBAqBNI,EArBM,KAqBIC,EArBJ,KAyCPC,EAAc,CAClBC,gBAAiB,MAGfL,EAAMM,OAAS,IAAGF,EAAYC,gBAAkB,aAChDL,EAAMM,OAAS,IAAGF,EAAYC,gBAAkB,OAEpD,IAAME,EAAcL,GAClBF,EAAMQ,KAAI,SAACC,EAAMC,GAAP,OAAiB,cAAC,EAAD,CACzB5B,OAAQ2B,EAAK3B,OACbI,KAAMuB,EAAKvB,KACXC,MAAOsB,EAAKtB,MAEZM,SAAU,kBA/BY,SAACkB,GACzB,IAAMC,EAAU,YAAOZ,GACvB5B,QAAQC,IAAIuC,GACZA,EAAWC,OAAOF,EAAW,GAC7BvC,QAAQC,IAAI,aAAcuC,GAC1BxC,QAAQC,IAAI,QAAS2B,GACrBC,EAASW,GAyBSE,CAAkBJ,IAClCpB,aAAc,SAACyB,GAAD,OAxBQ,SAACA,EAAOhB,GAEhC,IAAMY,EAAYX,EAAMgB,WAAU,SAAAP,GAAI,OAAIA,EAAKV,KAAOA,KAEhDa,EAAU,YAAOZ,GAEvBY,EAAWD,GAAWzB,KAAO6B,EAAME,OAAO1B,MAE1CU,EAASW,GAgBkBM,CAAkBH,EAAON,EAAKV,MAFlDU,EAAKV,OAMd,OACE,sBAAKrB,UAAU,MAAf,UACE,wBAAQA,UAAU,SAASM,MAAOoB,EAAaZ,QAvC5B,kBAAMW,GAAaD,IAuCtC,8BACCK,MCvDQY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.08af58d3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nclass Card extends Component {\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        console.log('1.Card js getDerivedStateFromProps')\r\n        return state\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('2.Card js shouldComponentUpdate')\r\n        return false\r\n    }\r\n\r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log('3.Card js getSnapshotBeforeUpdate')\r\n        // return null\r\n        return { message: 'some snapshot' }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        console.log('4.Card js componentDidUpdate', snapshot)\r\n\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        console.log('Card js component will unmount')\r\n    }\r\n\r\n    render() {\r\n        console.log('Card js rendering...')\r\n        return (\r\n            <div className=\"card\">\r\n                <img src={this.props.avatar} alt=\"Avatar\" style={{ width: '100%' }} />\r\n                <div className=\"container\">\r\n                    <h4><b>{this.props.name}</b></h4>\r\n                    <p>{this.props.title}</p>\r\n                    <input type=\"text\" onChange={this.props.onChangeName} value={this.props.name} />\r\n                    <p><button className=\"button button-red\" onClick={this.props.onDelete}>Delete</button></p>\r\n                    <div>{this.props.children}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Card from './components/Card.js';\nimport faker  from 'faker';\n\nfunction App() {\n  const [cards, setCards] = useState([\n    {\n      id: 'asdfsafsdf',\n      name: 'Damaris Schuster',\n      title: 'International Operations Producer',\n      avatar: 'https://avatars.dicebear.com/api/male/.svg'\n    },\n    {\n      id: 'gfhdfhg',\n      name: 'Bartholome Dietrich',\n      title: 'Future Security Developer',\n      avatar: 'https://avatars.dicebear.com/api/male/.svg'\n    },\n    {\n      id: 'tbdfghfghf',\n      name: 'Pattie Miller',\n      title: 'Forward Metrics AnalystChange Name',\n      avatar: 'https://avatars.dicebear.com/api/male/.svg'\n    }\n  ]);\n  const [showCard, setShowCard] = useState(true);\n  const toggleShowCard = () => setShowCard(!showCard);\n  const deleteCardHandler = (cardIndex) => {\n    const cards_copy = [...cards];\n    console.log(cards_copy);\n    cards_copy.splice(cardIndex, 1);\n    console.log('cards_copy', cards_copy);\n    console.log('cards', cards);\n    setCards(cards_copy);\n  }\n  const changeNameHandler = (event, id) => {\n    //1. which card\n    const cardIndex = cards.findIndex(card => card.id === id);\n    //2. make a copy of the cards\n    const cards_copy = [...cards];\n    //3. change the name of the specific card\n    cards_copy[cardIndex].name = event.target.value;\n    //4. set the cards with the latest version of card copy\n    setCards(cards_copy);\n  }\n  const buttonStyle = {\n    backgroundColor: null\n  }\n\n  if (cards.length < 3) buttonStyle.backgroundColor = 'lightpink';\n  if (cards.length < 2) buttonStyle.backgroundColor = 'red';\n\n  const cardsMarkup = showCard && (\n    cards.map((card, index) => <Card\n      avatar={card.avatar}\n      name={card.name}\n      title={card.title}\n      key={card.id}\n      onDelete={() => deleteCardHandler(index)}\n      onChangeName={(event) => changeNameHandler(event, card.id)}\n    />)\n  )\n\n  return (\n    <div className=\"App\">\n      <button className=\"button\" style={buttonStyle} onClick={toggleShowCard}>Toggle show/hide</button>\n      {cardsMarkup}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}